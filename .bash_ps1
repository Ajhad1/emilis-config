#!/usr/bin/env bash

echo "Loading..." # Notification so as to know something is happening

########### aliases ################
## command replacements ##
alias cd='_cd_' # replace cd with cd then ls
## alias cd='function _cd_ { \cd "$1"/; tree1 --noreport;}; _cd_' # replace cd with cd then ls
alias cd0='/bin/cd ' # allow cd to be used normally
alias cp0='/bin/cp ' # allows sp to be used normally
alias ls='ls -AhGs --color=auto --group-directories-first --file-type' # auto runs with color
alias ls0='\ls ' # allows ls to be used normally
alias cat0='\cat ' # allows cat to be run normally
alias egrep='egrep --color=auto ' # auto runs with color
alias fgrep='fgrep --color=auto ' # auto runs with color
alias grep='grep --color=auto ' # auto runs with color
alias wget='wget -c ' # auto runs with -c
alias vi='vim ' # always use vim instead of vi
## alias view='view -c"set number" -c"colorscheme torte"' # always run view with line numbers and colors
alias aspell='aspell --dont-backup' # always run in don't backup mode  
alias less='less -rF' # always display colors
alias jq='jq -C --indent 4' # always use color and tabs
alias highlight='highlight -O ansi --force -q' # always run highlight with color and default syntax
alias tree='tree -ChaDF --du --dirsfirst' # always colorize Tree
alias view='vim -R' # changes view to vim -R
alias fmt='fmt -t -w "$COLUMNS"' # line indentation
# alias fmt='fmt -t -w "$COLUMNS" -g 110' # line indentation
alias nl='_nl_' # left justify and indent
## alias nl='function _nl { \nl -ba -nrz -s " - " "$@" | fmt;}; _nl' # left justify and indent 
## alias nl='nl -ba -nrz -s " - "' # nl dont use tab and left justify
alias logout='_logout_' # save when logout
alias exit='_exit_' # save when exiting
alias diff='colordiff --side-by-side --left-column --report-identical-files' # diff using side by side
alias mank='man -k' # man -k shortcut
alias ssh='ssh -XYA' # ssh with X11 forwarding on

### Human readable ###
alias free='free -h' # makes free always human readable
alias df='df -h' # makes df alwaysd human readable
alias du='du -h' # makes du always human readable

## shortcuts built-in on other commands ##
## alias ..='\cd ../; ls' # allows shortcut for cd ../ ## caused issues
alias ...='\cd ../../; tree1 --noreport' # shortcut for cd ../../
alias ....='\cd ../../../; tree1 --noreport' # shortcut for cd ../../../
alias cdl='function _cdl_ { \cd "$@"/; ls;}; _cdl_' # cd then ls
alias cdt='function _cdt_ { \cd "$@"/; tree1 --noreport;}; _cdt_' # cd then tree1
alias cpp='rsync -ahr --info=progress2 ' # use rsync instead of cp for its progress
alias cpp1='rsync -ahr --progress' # Legacy use rsync instead of cp for its progress
# alias ll='ls -lA ' # short cut for long list
alias ll='tree1 -pu' # shortcut for long list with tree
alias mvf='function _mvf_ { mv $@; cd $2; }; _mvf_' # moves files and cds into it
alias cath='highlight ' # runs highlight instead of cat
alias catj='jq' # runs jq instead of cat
alias catv='vim -R' # runs vim -R
alias catn='cat -n' # runs cat with line numbering
alias cati='function _cati_ { \cat "$@" | fmt;}; _cati_' # runs with indentation
alias lstest='ls -Alhf --color=auto' # supposed to be a good ls
alias mkdirf='function _mkdirf_ { mkdir $1; cd $1; }; _mkdirf_' # makes directory and cds into it
alias cdp='cd ~/linux-config/' # changes to linux config directory
alias cdtfw='cd /opt/tfw/tfw-project/' # changes to tfw directory
# alias touchs='function _touchs_ { touch "$1"; chmod a+x "$1";}; _touchs_' # create shell script and automatically make executable
alias touchx='function _touchs_ { touch "$1"; chmod a+x "$1";}; _touchs_' # create shell script and automatically make executable
# alias mkexe='function _mkexe_ { chmod a+x "$1";}; _mkexe_' # make file executable
# alias mkx='function _mkexe_ { chmod a+x "$1";}; _mkexe_' # make file executable
# alias aspellc='aspell --dont-backup check -C' # always run aspellc with no backup and Camel case
alias tree1='tree -L 1' # Tree to the first level
alias tree2='tree -L 2' # Tree to the second level
alias tree3='tree -L 3' # Tree to the third level
alias tree4='tree -L 4' # Tree to the fourth level
alias tree5='tree -L 5' # Tree to the fifth level
alias psgrep='ps -ef | grep -v grep | grep' # use grep on ps without showing grep 
alias grepps='ps -ef | grep -v grep | grep' # use grep on ps without showing grep
alias grepp='ps -ef | grep -v grep | grep' # use grep on ps without showing grep
alias vims='vim -c"syntax on"' # add syntax highlighting to VIM
alias nl1='nl -w1' # set nl number length to 1
alias nl2='nl -w2' # set nl number length to 2
alias nl3='nl -w3' # set nl number length to 3
alias nl4='nl -w4' # set nl number length to 4
alias nl5='nl -w5' # set nl number length to 5
alias contentdiff='colordiff  --side-by-side --left-column --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-all-space --strip-trailing-cr' # content only diff ignores most formatting
alias diffcontent='contentdiff' # alias for contentdiff
alias dirdiff='colordiff --side-by-side --left-column --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-all-space --strip-trailing-cr --suppress-common-lines --report-identical-files' # compares directories
alias diffdir='dirdiff' # alias for dirdiff
alias gita='git add . && git status' # shortcut for git add
alias gits='git status' # shortcut for git status
alias gitsas='cd /opt/projects/git/subscribers && git status && git add . && git status' # shortcut for git status+ add + status

### new commands ###
alias getip='curl -s ifconfig.me && echo ""' # get public ip
alias getlocal='hostname -I' # get local ip
alias getprivate='hostname -I' # get local ip
alias getpublic='curl -s ifconfig.me' # get public ip

alias gittty='updatep && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/' # auto gets location of tty file
alias gitttypull='git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ fetch -q && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ merge -n | tr -d \\n' # git pull tty
alias gitttyadd='updatep && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add -A .' # git add changes tty
alias gitttycommit='updatep && gitttyadd && git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ commit -m "backup" --allow-empty-message' # git commit tty
## alias gitttycommit='git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add . && git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message' # git commit tty
alias gitttypush='updatep && gitttyadd && gitttycommit && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ push -q && reloadbash' # git push tty
## alias gitttypush='updatep && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add . && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ push && reloadbash' # git push tty

alias tfw='git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/' # auto gets location of tfw file
alias tfwpull='git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ pull' # git pull tfw
alias tfwadd='git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ add -A .' # git add changes tfw
alias tfwcommit='tfwadd && git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ commit -m "backup" --allow-empty-message' # git commit tfw without message
alias tfwcommitm='tfwadd && git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ commit -m' # git commit tfw with message
alias tfwpush='tfwadd && tfwcommit && git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ push -q' # git push tfw

alias editp='vim ~/linux-config/.bash_ps1' # starts editing personlization file
alias editi='vim ~/linux-config/install.sh' # starts editing install file
alias editv='vim ~/linux-config/.vimrc' # starts editing VIM personalization file
alias vimp='vim ~/linux-config/.vimrc' # starts editing VIM personalization file
# alias updatep='updatep' # making alias for updatep function

alias gdiff='git diff --color-words' # runs git diff the best way
alias gitvimdiff='git difftool --tool=vimdiff' # runs vimdiff for git diff
alias gitdiff='git diff --color-words' # runs git diff the best way
alias gvimdiff='gitvimdiff' # runs vimdiff for git diff

alias follow='tail -f' # tail -f alias
alias followindent='function _followindent_ { follow $1 | fmt; }; _followindent_' # follow with numbered lines
# alias follownl='function _follownl_ { follow $1 | nl; }; _follownl_' # follow with numbered lines
alias follownl='function _follownl_ { follow $1 | \nl -ba -nrz -s " - "; }; _follownl_' # follow with numbered lines
# alias follownl='function _follownl_ { follow $1 | \nl -ba -nrz -s " - " | fmt; }; _follownl_' # follow with numbered lines
# alias follownl='function _follownl_ { follow $1 | \nl -ba -nrz -s " - " | \fmt -t -w "$COLUMNS"; }; _follownl_' # follow with numbered lines
alias followjq='function _followjq_ { follow $1 | jq; }; _followjq_' # follow with json formatting

alias mkexe='chmod a+x' # Make file executable
alias trash='function _trash_ { mkdir --parents ~/.local/share/Trash/files; mv --force -t ~/.local/share/Trash/files "$@"; echo "\"$@\" has been moved to the Trash.";}; _trash_' # sends to trash instead of deleting
alias ports='netstat -tulanp ' # shows open ports
alias rmviews='rm -R -f ~/.vim/view/~*' # remove all saved vim views
alias common='commonlist | less' # outputs common commands into less

#### actual aliases ####
alias prettyprint='jq'
alias printpretty='jq'
alias pp='jq'
alias t1='tree1'
alias t2='tree2'
alias t3='tree3'
alias t4='tree4'
alias t5='tree5'
alias exits='exit' # save before exiting
alias edit='vim -u ~/linux-config/.vimrc' # edit = vim
# alias s='sudo ' # shortcut to sudo
alias bashreload='reloadbash' # shortcut to shortcut to reload bash
alias c='clear' # shortcut to clear screen
alias v='vim'
alias myip='getip' # real alias for getip
alias mylocal='getlocal' # real alias for getlocal
alias myprivate='getlocal' # real alias for getlocal
alias mypublic='getpublic' # real alias for getpublic

### fix typos ###
alias cd.='cd ../' # allows type to still work
alias cd..='cd ../' # allows typo to still work
alias cd~='cd ~' # allows typo to still work
alias gittypull='gitttypull' # allows typo to still work
alias gittyadd='gitttyadd' # allows typo to still work
alias gittycommit='gitttycommit' # allows typo to still work
alias gittypush='gitttypush' # allows typo to still work
alias gitttycomit='gitttycommit' # allows typo to still work
alias gittycomit='gitttycommit' # allows typo to still work
alias gitty='gittty' # allows typo to still work
alias tfwcomit='tfwcommit' # allows typo to still work
alias tfwcomitm='tfwcommitm' # allows typo to still work
alias pretyprint='prettyprint' # allows typo to stil work
alias printprety='printpretty' # allows typo to still work

################ common trying out ##################
alias untar='tar -zxvf' # shortcut to untar
alias hists='history | grep' # searches history
alias findlargefiles='sudo \du -a / | sort -n -r | head -n 20' # sorts out the top 20 largest files on the system
alias freespace='df' #shows free storage

## cover my butt ##
alias mkdir='mkdir -pv' # always runs mkdir with create parent if needed
alias rm='rm -I --preserve-root' # do not delete / or prompt if deleting more than 3 files at a time #
alias mv='mv -i' # always runs in confirmation mode #
alias cp='cp -i' # always runs in confirmation mode #
alias ln='ln -i' # always runs in confirmation mode #
alias chown='chown --preserve-root' # Parenting changing perms on / #
alias chmod='chmod --preserve-root' # Parenting changing perms on / #
alias chgrp='chgrp --preserve-root' # Parenting changing perms on / #
alias sudo='Sudo ' # always checks commands after sudo for aliases
alias yum='sudo yum' # auto run yum with sudo
alias apt-get='sudo apt-get' # always runs apt-get as sudo
alias dnf='sudo dnf' # always runs dnf as sudo
alias apt='sudo apt' # always run apt as sudo
alias tcpdump='sudo tcpdump' # run tcpdump as sudo
alias su='su -p' # run su with my env variables

################# functions #######################
###### commands turned into functions ###### --->
function Sudo {
	local firstArg=$1
	# echo "$firstArg"
	if [[ "$firstArg" == "-EH" ]]; then
		# echo "$firstArg"
		# echo "-E mathced"
		:
	elif [ $(type -t $firstArg) = function ]; then
		declare -i sudoCount+=1
		# echo "sudoCount =$sudoCount"
		declare -i count=1
		while [[ $count<=$# ]]
		do
			shift
			if [[ $count == 1 ]]; then
				local restOfArgs=$*
				# echo "saving restOfArgs as $*"
			fi
			count+=1
		done
		# echo "\"$(declare -f $firstArg)\";$firstArg $restOfArgs"
		eval sudo -EH bash -c "\"$(declare -f $firstArg)\";$firstArg $restOfArgs"
		# echo "errors before or affter"
	elif [ $(type -t $firstArg) = alias ]; then
		declare -i sudoCount+=1
		# echo "sudoCount =$sudoCount"
		command sudo -EH "$@"
	else
		command sudo -EH "$@"
	fi
}
function Sudo1 {
	local firstArg=$1
	local count=1
	for arg in $@
	do
		echo "Start loop $count"
		local sudoCommand=""
		local type=$(type -p $arg)
		echo "$arg is = $type"
		if [[ -z $type ]]; then
			echo "$arg is something"
			if [[ $(type -a $arg)=*function* ]]; then
				alias sudo='\sudo '
				declare -f $arg
				# shift && sudo -EHi $firstArg $*
				# shift && command sudo -EH sh -c "$(declare -f $firstArg);$firstArg $*"
				echo "$arg is of type $(type -t $arg)"
				# while [ ! -z "$1" ] && [ $(type -t $1) = function ]
				# echo "sudoCommands = $sudoCommand"
				# shift
				# echo "shifted"
				# sudoCommand+='$(declare -f '$arg');'$arg' '$*
				# echo "command concatenated = $sudoCommand"
			elif [[ $(type -t $arg) = alias ]]; then
				alias sudo='\sudo '
				echo "$arg is an alias"
				# eval "sudo $@"
			else
				echo "Secondary if = $arg is not an alias or function"
				# command sudo "$@"
				# exit 0
			fi
		else
			echo "Main if = $arg is not an alias or function"
			# command sudo "$@"
			# exit 0

		fi
			echo "Ending loop $count"
		count+=1
	done
	shift && command sudo -EH sh -c "eval $(declare -f $firstArg);$firstArg $*"
}

## log out function ##
function _logout_
{
	commitVar=$(updatep > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add . > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message --short)
	echo "$commitVar"
	if [[ -z $commitVar ]]; then
		ssh-add -D
		ssh-agent -k
		\logout
	else
		gitttypush
		ssh-add -D
		ssh-agent -k
		\logout
	fi
}

function _exit_
{
	commitVar=$(updatep > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add . > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message --short)
	echo "$commitVar"
	if [[ -z $commitVar ]]; then
		\exit
	else
		gitttypush
		\exit
	fi
}

function _nl_ { \nl -ba -nrz -s " - " "$@" | fmt;} #
function _cd_ {
	if [[ $1 != '-' ]]; then
		local slash='/'
	else
		local slash=''
	fi
	\cd "$@"$slash > /dev/null; tree1 --noreport;
} # replace cd with cd then ls
###### commands turned into functions ###### <---

function functest
{
	echo $0
}

## get hosts file and list hosts ##
function hosts
{
	cat /etc/hosts
}

## add indent to less ##
function lessf
{
	fmt $1 | less
}

function touchs
{
	touch "$1"; chmod a+x "$1"; ls .;
} # create shell script and automatically make executable

function touchx
{
	touch "$1"; chmod a+x "$1"; ls .;
} # create shell script and automatically make executable

function mkexe
{
	chmod a+x "$1";
} # make file executable

function mkx
{
	chmod a+x "$1";
} # make file executable

## restart on any machine ##
function restart
{
	if [ -d "/usr/lib/systemd" ]; then
		sudo shutdown -r now
	else
		sudo telinit 6
	fi	
}

## get system info ##
function getSystemInfo
{
	osInfo=$(cat /etc/*release)
	shellName=$(ps -p $$ -o args | tail -n 1)
	terminalParentId=$(ps -p $$ -o ppid | tail -n 1 | sed -e 's/^[[:space:]]*//')
	terminalNameRaw=$(ps -p "$terminalParentId" -o args | tail -n 1 )
	
	if [[ $terminalNameRaw == *"gnome-terminal"* ]]; then
		terminalName="GNOME"
	elif [[ $terminalNameRaw == *"tmux"* ]]; then
		terminalName="TMUX"
	elif [[ $terminalNameRaw == *"sshd"* ]]; then
		terminalName="SSH"
	else
		terminalName="UNKNOWN or $terminalNameRaw"
	fi
	
	if [[ $osInfo == *"ubuntu"* ]]; then
		osName="UBUNTU"
	elif [[ $osInfo == *"centos"* ]]; then
		osName="CENTOS"
	elif [[ $osInfo == *"aws"* ]]; then
		osName="AWS-linux"
	elif [[ $osInfo == *"debian"* ]]; then
		osName="Debian"
	else
		osName="UNKNOWN"
	fi
}

## reload aliases from .bash_ps1##
function reloadbash
{
	getSystemInfo
	if [[ $osName == "UBUNTU" ]]; then
		if [[ $terminalName == "GNOME" ]]; then
			source ~/.bashrc
		else
			source ~/.bashrc
		fi
	elif [[ $osName == "CENTOS" ]]; then
		if [[ $terminalName == "GNOME" ]]; then
			gnome-terminal --tab --title=newTab
			exit
		else
			source ~/.bashrc
		fi
	else
		if [[ $terminalName == "GNOME" ]]; then
			gnome-terminal --tab --title=newTab
			exit
		else
			source ~/.bashrc
		fi
	fi
}

# Syntax: "repeat [X] [command]"
function repeat
{
	local i max
	max=$1; shift;
	for ((i=1; i <= max ; i++)); do  # --> C-like syntax
		eval "$@";
	done
}

###### updates personal git stuff ######
function updatep
{
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config user.name "Alejandro Colon"
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config user.email "Alejandro@alejandroc.com"
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config --global push.default matching
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ remote add origin https://ajhad1@github.com/Ajhad1/linux-config.git 2>/dev/null
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ remote set-url origin https://ajhad1@github.com/Ajhad1/linux-config.git
}

### returns my most common commands ###
function mycommon
{
	history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

### list common commands ###
function commonlist
{
	declare -a commandlist=(awk sed git pwd ls cat cp mv mkdir rmdir rm touch find grep sudo df du head tail diff tar chmod chown chgrp kill ping wget uname top history man echo zip unzip hostname useradd userdel)
	declare -a descriplist=()
	for i in ${commandlist[@]}; do
		commandstr=$(whatis $i);
		echo -e $commandstr|sed 's/ -/\n\t-/g';
	done
	echo -e "cd (1)\n\t- Change the shell working directory.;";
	echo -e "jobs (1)\n\t- Display status of jobs. List the active jobs.;";
	echo -e "!* (1)\n\t- Copy previous options and arguments.;";
	echo -e "!! (1)\n\t- Copy complete last command line.;";
}

### calls appropriate extraction tool ###
function extract
{
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
		echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
		return 1
	else
		for n in $@
		do
			if [ -f "$n" ] ; then
				case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
				echo "extract: '$n' - unknown archive method"
				return 1
				;;
				esac
			else
				echo "'$n' - file does not exist"
				return 1
			fi
		done
	fi
}


################## CLI completion/auto-complete? #############
## builtin autocompletion ##
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

#### IP completion for connections ####
function _complete_hosts
{
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	host_list=`{
		for c in /etc/ssh_config /etc/ssh/ssh_config ~/.ssh/config
		do [ -r $c ] && sed -n -e 's/^Host[[:space:]]//p' -e 's/^[[:space:]]*HostName[[:space:]]//p' $c
		done
		for k in /etc/ssh_known_hosts /etc/ssh/ssh_known_hosts ~/.ssh/known_hosts
		do [ -r $k ] && egrep -v '^[#\[]' $k|cut -f 1 -d ' '|sed -e 's/[,:].*//g'
		done
		sed -n -e 's/^[0-9][0-9\.]*//p' /etc/hosts; }|tr ' ' '\n'|grep -v '*'`
	COMPREPLY=( $(compgen -W "${host_list}" -- $cur))
	return 0
}
complete -F _complete_hosts ssh
complete -F _complete_hosts sshs
complete -F _complete_hosts host
complete -F _complete_hosts telnet
complete -F _complete_hosts ping

## DSCONFIG CLI completion ##
function _complete_ds
{
	dspath=$(find / -name "dsconfig" -mount 2>/dev/null | tail -n 1)
	## dspath=$(locate /bin/dsconfig | tail -n 1)
	if [ ! -z "$dspath" ] ; then
		commandlist=$($dspath --help-all | grep '^[a-z].*')
		printf "$commandlist"
		return 0
	fi
}
## dspath=$(locate /bin/dsconfig | tail -n 1)
dspath=$(find / -name "dsconfig" -mount 2>/dev/null | tail -n 1)
if [ ! -z "$dspath" ] ; then
	complete -W "$(_complete_ds)" dsconfig
fi

###################### Experimental ########################
# make less more friendly for non-text input files, see lesspipe(1)
# [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


################### customization for the command prompt #################

#### code to input separator ####
# Fill with minuses
# (this is recalculated every time the prompt is shown in function prompt_command):
fill="--- "

reset_style='\[\033[00m\]'
if [ -z "$VIM" ];
	then status_style=$reset_style'\[\033[0;90m\]' # gray color; use 0;37m for lighter color
else status_style=$reset_style'\[\033[0;90;107m\]'
fi
prompt_style=$reset_style
command_style=$reset_style'\[\033[1;29m\]' # bold black
# Prompt variable:
function prompt_command {

	# create a $fill of all screen width minus the time string and a space and USER and a space:
	name=$(fc -l -1 | awk -v u="$USER" '{if ($2=="sudo") { if ($3=="-u") u=$4; else u="root"; }; printf "%s",u}')
	if [[ $name == "" ]] ; then
		nameVar=""
	else
		nameVar="UN: $name | "
	fi
	pwdVar="DIR: $(pwd) | "
	hostnameVar="HN: $(hostname) | "
	let fillsize=${COLUMNS}-11-${#nameVar}-${#pwdVar}-${#hostnameVar}
	fill=""
	while [ "$fillsize" -gt "0" ]
	do
		fill="-${fill}" # fill with underscores to work on 
		let fillsize=${fillsize}-1
	done
	
	NEW_NEW_PS1="${fill} ${hostnameVar}${pwdVar}${nameVar}XX:XX:XX"
	if [[ ${#NEW_NEW_PS1} -gt ${COLUMNS} ]] ; then
		let fillsize=${COLUMNS}-11-${#nameVar}-${#pwdVar}
		fill=""
		while [ "$fillsize" -gt "0" ]
		do
			fill="-${fill}" # fill with underscores to work 
			let fillsize=${fillsize}-1
		done
		hostnameVar=""
	fi
	
	# If this is an xterm set the title to user@host:dir
	case "$TERM" in
		xterm*|rxvt*)
			bname=`basename "${PWD/$HOME/~}"`
			echo -ne "\033]0;${bname}: ${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"
			;;
		*)
			;;
	esac
}

OLD_PROMPT_COMMAND=PROMPT_COMMAND
NEW_PROMPT_COMMAND=prompt_command
if [[ ! $OLD_PROMPT_COMMAND == $NEW_PROMPT_COMMAND ]] ; then
	PROMPT_COMMAND=prompt_command
fi

OLD_PS1="$PS1"
NEW_PS1='${fill} ${hostnameVar}${pwdVar}${nameVar}\t\n'
## if [[ ${#NEW_PS1} -gt $columns ]] ; then
## 	columns1=$columns
## 	NEW_PS1='$columns1 $fill DIR: $pwdVar UN: $name \t \n'
## fi
if [[ ! $PS1 == *'${nameVar}'* ]] ; then
	PS1="$status_style""$NEW_PS1""$prompt_style$OLD_PS1$command_style"
fi

# Reset color for command output
# (this one is invoked every time before a command is executed):
trap 'echo -ne "\e[0m"' DEBUG


### my personal settings ###
force_color_prompt=yes             # add color to terminals
HISTCONTROL=ignoreboth # don't put duplicate lines or lines starting with space in the history.
shopt -s checkwinsize     # check the window size after each command and, if necessary, update the values of LINES and COLUMNS.

####### load my newest personalization file on TTY load ##########
getSystemInfo
prompt_command && prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
echo "Pulling latest personalization file from remote repository.  "
printf "______Status:_____ " && printf "$(git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ fetch -q 2>/dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ merge -n | tr -d \\n)" && echo "" # pull on load
echo "Comparing local personalization file to remote in git."
git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ add . > /dev/null && git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message --short > /dev/null # adds and commits any changes
printf "_____Changes:_____ " && echo -e $(git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ status --short) # get status on load
echo "If local changes push using gitttypush"
git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config user.name "Alejandro Colon"
git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config user.email "Alejandro@alejandroc.com"
git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config --global push.default matching
git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ remote add origin https://ajhad1@github.com/Ajhad1/linux-config.git 2>/dev/null
git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ remote set-url origin https://ajhad1@github.com/Ajhad1/linux-config.git
prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
echo "_____Public IP:    _____ $(getip)"
echo "_____Private IP(s):_____ $(hostname -I)"
echo "_____FQDN(s):      _____ $(hostname -A)"
echo "_____OS:           _____ $osName"
echo "_____Terminal:     _____ $terminalName"
prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
## echo "_____Current Directory:_____ $(pwd)"
echo "$(pwd)"
## prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
tree1 --noreport
## ls -AhG --color=auto --group-directories-first --file-type

###### SSH AGENT AUTO START ######
###### LINK: http://mah.everybody.org/docs/ssh https://stackoverflow.com/a/18915067/382458 ######
SSH_ENV="$HOME/.ssh/agent-environment"
mkdir $HOME/.ssh/ > /dev/null

function start_agent {
	echo "Initialising new SSH agent..."
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
	echo succeeded
	chmod 600 "${SSH_ENV}"
	. "${SSH_ENV}" > /dev/null
	/usr/bin/ssh-add;
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
	. "${SSH_ENV}" > /dev/null
	if [[ -f ~/.ssh/config ]]; then
		#ps ${SSH_AGENT_PID} doesn't work under cywgin
		ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
			start_agent;
		}
	else 
		eval "$(ssh-agent -k 2>/dev/null)"
	fi
else
	if [[ -f ~/.ssh/config ]]; then
		start_agent;
	else
		eval "$(ssh-agent -k 2>/dev/null)"
	fi
fi
