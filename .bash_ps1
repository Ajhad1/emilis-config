#!/usr/bin/env bash

export PS4='+(Line: ${LINENO})(\t:$(date "+%N")): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
# export PS4='+(Line: ${LINENO})(\t:$(date "+%N")): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
# export PS4='+(${BASH_SOURCE}:${LINENO})($(date "+%s.%N")): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# set -xv # turn on debugging

########## vv ########## Initialization ########## vv ##########

echo -n "Pulling latest personalization file from remote repository... "

function intPublicIp {
	# declare -g publicIp="$(curl -s ifconfig.me && echo '')"
	echo "$(curl -s ifconfig.me)" > ~/.publicIp.txt
	# sleep 15
}
$(intPublicIp) &
intPublicIpPid=$!

function intMergeOutput1 {
	# declare -g mergeOutput1="$(git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ fetch -q 2>/dev/null)"
	echo "$(git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ fetch -q 2>/dev/null)" > ~/.mergeOutput1.txt
}
$(intMergeOutput1) &
intMergeOutput1Pid=$!

function intFqdn {
	# declare -g fqdn="$(hostname -A)"
	echo "$(hostname -A)" > ~/.fqdn.txt
}
$(intFqdn) &
intFqdnPid=$!

disown -r

# set +xv # turn off debugging


########## ^^ ########## Initialization ########## ^^ ##########

########## vv ########## Aliases ########## vv ##########

#### vv #### Command Replacements #### vv ####

alias sudo='Sudo '	# Replaced with custom sudo and always checks commands after sudo for aliases
alias cd='_cd_'		# replace cd with cd then ls
alias cd0='/bin/cd '	# allow cd to be used normally
alias cp0='/bin/cp '	# allows sp to be used normally
alias wget='wget -c '	# auto runs with -c
alias vi='vim '		# always use vim instead of vi
alias ssh='ssh -XYA'	# ssh with X11 forwarding on and agent forwarding
alias free='free -h'	# makes free always human readable
alias df='df -h'	# makes df alwaysd human readable
alias du='du -h'	# makes du always human readable
alias nl='_nl_'		# left justify and indent
alias logout='_logout_'	# save when logout
alias exit='_exit_'	# save when exiting

alias ls0='\ls '			# allows ls to be used normally
alias cat0='\cat '			# allows cat to be run normally
alias egrep='egrep --color=always '	# auto runs with color
alias fgrep='fgrep --color=always '	# auto runs with color
alias grep='grep --color=always '		# auto runs with color
alias aspell='aspell --dont-backup'	# always run in don't backup mode
alias jq='jq -C --indent 4'		# always use color and tabs
alias fmt='fmt -t -w "$COLUMNS"'	# line indentation
	# alias fmt='fmt -t -w "$COLUMNS" -g 110' # line indentation

	alias highlight='highlight -O ansi --force -q'		# always run highlight with color and default syntax
alias tree='tree -ChaDF --du --dirsfirst'		# always colorize Tree
alias view='view -c"set number" -c"colorscheme torte"'	# always run view with line numbers and colors
	# alias view='vim -R'	# changes view to vim -R
# alias mosh='MOSH_SERVER_NETWORK_TMOUT=259200 mosh'	# add timeout to all mosh sessions

alias ls='\ls -AhGs --color=always --group-directories-first --file-type'		# auto runs with color
alias ls2='\ls -AhGs --color=always --group-directories-first --file-type'		# auto runs with color
	# alias ls='_ls_'		# replace ls with function
alias diff='colordiff --side-by-side --left-column --report-identical-files'	# diff using side by side
alias less='less --quit-if-one-screen --quiet --raw-control-chars --squeeze-blank-lines --quit-on-intr -M -PM"?lbLine\: %lb.?L\/%L.?Pb     Complete\: %Pb\%.?f     Current File\: %f.?x     Next File\: %x     File\:%i\/%m.?f:     PWD\: $PWD."' # always display colors
manViewer='vim -c MANPAGER -' # use vim to read man pages
	# manViewer='\less --quit-if-one-screen --quiet --raw-control-chars --squeeze-blank-lines --quit-on-intr' # less for man
	# manViewer='\less -options X --quit-if-one-screen --quiet --raw-control-chars --squeeze-blank-lines --quit-on-intr -M -PM"?lbLine\: %lb.?L\/%L.?Pb     Complete\: %Pb\%.?f     Current File\: %f.?x     Next File\: %x     File\:%i\/%m.     PWD\: $PWD"' # less for man
alias man='man --pager="$manViewer"' # setting man pager to less

#### ^^ #### Command Replacements #### ^^ ####

#### vv #### Shortcuts built on top of other commands #### vv ####

alias catj='jq'		# runs jq instead of cat
alias catv='vim -R'	# runs vim -R
alias catn='cat -n'	# runs cat with line numbering
alias exits='exit'	# save before exiting
alias ll='tree1 -pu'	# shortcut for long list with tree
	# alias ll='ls -lA '	# short cut for long list
alias cath='highlight '	# runs highlight instead of cat
	# alias ..='\cd ../; ls'	# allows shortcut for cd ../ ## caused issues

alias ...='\cd ../../; showDir'	# shortcut for cd ../../
alias ....='\cd ../../../; showDir'	# shortcut for cd ../../../
alias cdp='cd ~/linux-config/'		# changes to linux config directory
alias cdtfw='cd /opt/tfw/tfw-project/'	# changes to tfw directory
alias cpp='rsync -ahr --info=progress2 ' # use rsync instead of cp for its progress
alias cpp1='rsync -ahr --progress'	# Legacy use rsync instead of cp for its progress
alias lstest='ls -Alhf --color=always'	# supposed to be a good ls

alias nl1='nl -w1'	# set nl number length to 1
alias nl2='nl -w2'	# set nl number length to 2
alias nl3='nl -w3'	# set nl number length to 3
alias nl4='nl -w4'	# set nl number length to 4
alias nl5='nl -w5'	# set nl number length to 5

alias treelimit='tree --filelimit '	# runs tree expecting filelimit
alias tree1='tree -L 1'		# Tree to the first level
alias tree2='tree -L 2'		# Tree to the second level
alias tree3='tree -L 3'		# Tree to the third level
alias tree4='tree -L 4'		# Tree to the fourth level
alias tree5='tree -L 5'		# Tree to the fifth level

alias mank='man -k'			# man -k shortcut
alias vimp='vim ~/linux-config/.vimrc'	# starts editing VIM personalization file
alias vims='vim -c"syntax on"'		# add syntax highlighting to VIM

alias psgrep='ps -ef | grep -v grep | grep'	# use grep on ps without showing grep
alias grepps='ps -ef | grep -v grep | grep'	# use grep on ps without showing grep
alias grepp='ps -ef | grep -v grep | grep'	# use grep on ps without showing grep

alias gita='git add . && git status'		# shortcut for git add
alias gitpush='git push'			# shortcut for git push
alias gitpull='git pull'			# shortcut for git pull
alias gits='git status'				# shortcut for git status
alias gituser='git config user.name "Alejandro Colon"'	# shortcut for git add username
alias gitemail='git config user.email'			# shortcut for git add email
alias gdiff='git diff --color-words'		# runs git diff the best way
alias gitvimdiff='git difftool --tool=vimdiff'	# runs vimdiff for git diff
alias gitdiff='git diff --color-words'		# runs git diff the best way
alias gvimdiff='gitvimdiff'			# runs vimdiff for git diff
alias gitsas='git status && git add . && git status' # shortcut for git status+ add + status

alias contentdiff='colordiff --side-by-side --left-column --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-all-space --strip-trailing-cr' # content only diff ignores most formatting
alias dirdiff='colordiff --side-by-side --left-column --ignore-tab-expansion --ignore-trailing-space --ignore-space-change --ignore-all-space --strip-trailing-cr --suppress-common-lines --report-identical-files' # compares directories

#### ^^ #### Shortcuts built on top of other commands #### ^^ ####

#### vv #### New commands #### vv ####

alias getlocal='hostname -I'		# get local ip
alias getprivate='hostname -I'		# get local ip
alias getpublic='curl -s ifconfig.me'	# get public ip
alias follow='tail -f'			# tail -f alias
alias mkexe='chmod a+x'			# Make file executable
alias ports='netstat -tulanp '		# shows open ports
alias rmviews='rm -R -f ~/.vim/view/~*'	# remove all saved vim views
alias common='commonlist | less'	# outputs common commands into less

alias pinstall='~/linux-config/install.sh'	# runs the install script
alias getip='curl -s ifconfig.me && echo ""'	# get public ip

## Edit = Vim ##
alias edit='vim -u ~/linux-config/.vimrc'	# edit = vim
alias editp='vim ~/linux-config/.bash_ps1'	# starts editing personlization file
alias editi='vim ~/linux-config/install.sh'	# starts editing install file
alias editv='vim ~/linux-config/.vimrc'		# starts editing VIM personalization file

## gittty calls git for linux config ##
alias gittty='updatep && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/' # auto gets location of tty file
alias gitttypull='git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ fetch -q && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ merge -n | tr \\n " "' # git pull tty
alias gitttyadd='updatep && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add -A .' # git add changes tty
alias gitttycommit='updatep && gitttyadd && git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ commit -m "backup" --allow-empty-message'	# git commit tty
# alias gitttypush='updatep && gitttyadd && gitttycommit && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ push -q && reloadbash'		# git push tty

## tfw calls git on tfw ##
alias tfw='git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/' # auto gets location of tfw file
alias tfwpull='git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ pull' # git pull tfw
alias tfwadd='git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ add -A .' # git add changes tfw
alias tfwcommit='tfwadd && git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ commit -m "backup" --allow-empty-message' # git commit tfw without message
alias tfwcommitm='tfwadd && git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ commit -m' # git commit tfw with message
alias tfwpush='tfwadd && tfwcommit && git --git-dir=/opt/tfw/tfw-project/.git --work-tree=/opt/tfw/tfw-project/ push -q' # git push tfw

#### ^^ #### New commands #### ^^ ####

#### vv #### Actual Aliases #### vv ####

alias c='clear'	# shortcut to clear screen
alias v='vim'	# shortcut for vim
alias s='sudo '	# shortcut to sudo

alias showdir='showDir'	# real alias for showDir
alias pp='jq'		# real alias for jq
alias prettyprint='jq'	# real alias for jq
alias printpretty='jq'	# real alias for jq
alias t1='tree1'	# real alias for tree1
alias t2='tree2'	# real alias for tree2
alias t3='tree3'	# real alias for tree3
alias t4='tree4'	# real alias for tree4
alias t5='tree5'	# real alias for tree5

alias bashreload='reloadbash'	# shortcut to shortcut to reload bash
alias reload='reloadbash'	# shortcut to shortcut to reload bash
alias myip='getip'		# real alias for getip
alias mylocal='getlocal'	# real alias for getlocal
alias myprivate='getlocal'	# real alias for getlocal
alias mypublic='getpublic'	# real alias for getpublic
alias diffcontent='contentdiff' # real alias for contentdiff
alias diffdir='dirdiff'		# real alias for dirdiff

alias cd...='\cd ../../; showDir'		# shortcut for cd ../../
alias cd....='\cd ../../../; showDir'		# shortcut for cd ../../../
alias cd.....='\cd ../../../../; showDir'	# shortcut for cd ../../../../
alias cd......='\cd ../../../../../; showDir'	# shortcut for cd ../../../../../

#### ^^ #### Actual Aliases #### ^^ ####

#### vv #### Catch Typos #### vv ####

alias cd.='cd ../'	# allows type to still work
alias cd..='cd ../'	# allows typo to still work
alias cd~='cd ~'	# allows typo to still work
alias gitty='gittty'	# allows typo to still work

alias gittypull='gitttypull'	# allows typo to still work
alias gittyadd='gitttyadd'	# allows typo to still work
alias gittypush='gitttypush'	# allows typo to still work
alias gittycomit='gitttycommit'	# allows typo to still work
alias gitttycomit='gitttycommit' # allows typo to still work
alias gittycommit='gitttycommit' # allows typo to still work
alias tfwcomit='tfwcommit'	# allows typo to still work
alias tfwcomitm='tfwcommitm'	# allows typo to still work
alias pretyprint='prettyprint'	# allows typo to stil work
alias printprety='printpretty'	# allows typo to still work

#### ^^ #### Catch Typos #### ^^ ####

#### vv #### Common aliases I am trying out #### vv ####

alias untar='tar -zxvf'		# shortcut to untar
alias hists='history | grep'	# searches history
alias freespace='df'		# shows free storage

alias findlargefiles='sudo \du -a / | sort -n -r | head -n 20' # sorts out the top 20 largest files on the system

#### ^^ #### Common aliases I am trying out #### ^^ ####

#### vv #### Cover my butt #### vv ####

alias mkdir='mkdir -pv'	# always runs mkdir with create parent if needed
alias mv='mv -i'	# always runs in confirmation mode #
alias cp='cp -i'	# always runs in confirmation mode #
alias ln='ln -i'	# always runs in confirmation mode #
alias yum='sudo yum'	# auto run yum with sudo
alias dnf='sudo dnf'	# always runs dnf as sudo
alias apt='sudo apt'	# always run apt as sudo
alias su='su -p'	# run su with my env variables

alias apt-get='sudo apt-get'	# always runs apt-get as sudo
alias tcpdump='sudo tcpdump'	# run tcpdump as sudo

alias rm='_rm_'				# do not delete / or prompt if deleting more than 3 files at a time #
# alias rm='rm -I --preserve-root'	# do not delete / or prompt if deleting more than 3 files at a time #
alias chown='chown --preserve-root'	# Parenting changing perms on / #
alias chmod='chmod --preserve-root'	# Parenting changing perms on / #
alias chgrp='chgrp --preserve-root'	# Parenting changing perms on / #

#### ^^ #### Cover my butt #### ^^ ####

########## ^^ ########## Aliases ########## ^^ ##########

########## vv ########## Functions ########## vv ##########

##### vv ##### Commands turned into functions ##### vv #####

## Replace rm to auto ls after ##
function _rm_ {
	local flag=false
	for arg
	do
		# echo "pwd\$arg = $(pwd)/$arg"
		if [[ -f "$(pwd)/$arg" ]]; then
			flag=true
			# echo "$(pwd)/$arg"
		fi
	done
	
	# do not delete / or prompt if deleting more than 3 files at a time #
	\rm -I --preserve-root $@
	
	# echo "flag = $flag"
	if ("$flag"); then
		showDir
	fi
}

## Replace ls to auto run with color and remove the total ##
function _ls_ {
	echo "$(pwd) == \ls -AhGs --color=always --group-directories-first --file-type"
}

## Replace sudo with something that works with aliases ##
function Sudo {
	# set -xv # turn on debugging
	# echo "$firstArg"
	
	while [[ $1 == -EH ]] || [[ $1 == sudo ]] || [[ $1 == Sudo ]]
	do
		shift
	done
	# if [[ $1 == -EH ]]; then
	# 	shift
	# fi
	# if [[ $1 == sudo ]] || [[ $1 == Sudo ]]; then
	# 	shift
	# fi
	
	local firstArg=$1
	local firstArgType=$(type -t $firstArg)
	if [[ $firstArg == "-"* ]]; then
		command \sudo -EH "$@"
	elif [[ $firstArgType == function ]]; then
		declare -i count=1
		while [ $count -lt $# ]
		do
			shift
			if [[ $count == 1 ]]; then
				local restOfArgs=$*
				# echo "saving restOfArgs as $*"
			fi
			count+=1
		done
		# echo "\"$(declare -f $firstArg)\";$firstArg $restOfArgs"
		eval \sudo -EH bash -c "\"$(declare -f $firstArg)\";$firstArg $restOfArgs"
	elif [[ $firstArgType == alias ]]; then
		command \sudo -EH "$@"
	elif [[ $firstArgType == file ]]; then
		command \sudo -EH "$@"
	else
		echo "Error Parsing Arguments."
	fi
	# set +xv # turn off debugging
}

## Replace log out to save first ##
function _logout_ {
	commitVar=$(updatep > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add . > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message --short)
	echo "$commitVar"
	if [[ -z $commitVar ]]; then
		ssh-add -D
		ssh-agent -k
		\logout
	else
		gitttypush
		ssh-add -D
		ssh-agent -k
		\logout
	fi
}

## Replace exit to save first ##
function _exit_ {
	commitVar=$(updatep > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ add . > /dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ commit -m " " --allow-empty-message --short)
	echo "$commitVar"
	if [[ -z $commitVar ]]; then
		\exit
	else
		gitttypush
		\exit
	fi
}

## Replace nl to indent as well ##
function _nl_ {
	\nl -ba -nrz -s " - " "$@" | fmt;
}

## Replace cd to print dir after cd ##
function _cd_ {
	if [[ $1 != '-' ]]; then
		local slash='/'
	else
		local slash=''
	fi
	\cd "$@"$slash > /dev/null; showDir;
}

## Replace mosh to add timeout to all mosh sessions ##
function mosh
{
	MOSH_SERVER_NETWORK_TMOUT=259200 mosh "$@"
	[[ $? -ne 0 ]] && (echo; ssh "$@")
}

## restart on any machine ##
function restart
{
	if [ -d "/usr/lib/systemd" ]; then
		sudo shutdown -r now
	else
		sudo telinit 6
	fi	
}

##### ^^ ##### Commands turned into functions ##### ^^ #####

##### vv ##### New Functions ##### vv #####

## test function ##
function functest
{
	echo $0
}

## sends to trash instead of deleting ##
function trash
{
	local flag=false
	for arg
	do
		# echo "pwd\$arg = $(pwd)/$arg"
		if [[ -f "$(pwd)/$arg" ]]; then
			flag=true
			# echo "$(pwd)/$arg"
		fi
	done
	
	mkdir --parents ~/.local/share/Trash/files;
	mv --force -t ~/.local/share/Trash/files "$@";
	
	# echo "flag = $flag"
	if ("$flag"); then
		showDir
	fi
	
	echo "\"$@\" has been moved to the Trash.";
}

## get hosts file and list hosts ##
function hosts
{
	cat /etc/hosts
}

## make file executable ##
function mkexe
{
	chmod a+x "$1"; showDir;
} # make file executable

## make file executable ##
function mkx
{
	chmod a+x "$1"; showDir;
}

## Syntax: "repeat [X] [command]" ##
function repeat
{
	local i max
	max=$1; shift;
	for ((i=1; i <= max ; i++)); do  # --> C-like syntax
		eval "$@";
	done
}

## updates personal git stuff ##
function updatep
{
	git config --global color.ui always
	git config --global color.branch always
	git config --global color.interactive always
	git config --global color.status always
	git config --global color.pager true
	git config --global color.diff always
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config user.name "Alejandro Colon"
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config user.email "Alejandro@alejandroc.com"
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ config --global push.default matching
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ remote add origin https://ajhad1@github.com/Ajhad1/linux-config.git 2>/dev/null
	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ remote set-url origin https://ajhad1@github.com/Ajhad1/linux-config.git
}

## git push tty ##
function gitttypush {
	updatep
	gitttyadd
	local gitstatus=$(gittty status)
	if [[ ! $gitstatus == *"nothing to commit"* ]]; then
		gitttycommit 2>/dev/null
	fi
	git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ push -q && reloadbash
}

## returns my most common commands ##
function mycommon
{
	history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

## list common commands ##
function commonlist
{
	declare -a commandlist=(awk sed git pwd ls cat cp mv mkdir rmdir rm touch find grep sudo df du head tail diff tar chmod chown chgrp kill ping wget uname top history man echo zip unzip hostname useradd userdel)
	declare -a descriplist=()
	for i in ${commandlist[@]}; do
		commandstr=$(whatis $i);
		echo -e $commandstr|sed 's/ -/\n\t-/g';
	done
	echo -e "cd (1)\n\t- Change the shell working directory.;";
	echo -e "jobs (1)\n\t- Display status of jobs. List the active jobs.;";
	echo -e "!* (1)\n\t- Copy previous options and arguments.;";
	echo -e "!! (1)\n\t- Copy complete last command line.;";
}

## calls appropriate extraction tool ##
function extract
{
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
		echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
		return 1
	else
		for n in $@
		do
			if [ -f "$n" ] ; then
				case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
				echo "extract: '$n' - unknown archive method"
				return 1
				;;
				esac
			else
				echo "'$n' - file does not exist"
				return 1
			fi
		done
	fi
}

## reload aliases from .bash_ps1 ##
function reloadbash
{
	# set +xv # turn off debugging
	getSystemInfo
	if [[ $osName == "UBUNTU" ]]; then
		if [[ $terminalName == "GNOME" ]]; then
			# set +xv # turn off debugging
			source ~/.bashrc
		else
			# set +xv # turn off debugging
			source ~/.bashrc
		fi
	elif [[ $osName == "CENTOS" ]]; then
		if [[ $terminalName == "GNOME" ]]; then
			# set +xv # turn off debugging
			gnome-terminal --tab --title=newTab
			exit
		else
			# set +xv # turn off debugging
			source ~/.bashrc
		fi
	else
		if [[ $terminalName == "GNOME" ]]; then
			# set +xv # turn off debugging
			gnome-terminal --tab --title=newTab
			exit
		else
			# set +xv # turn off debugging
			source ~/.bashrc
		fi
	fi
	# set -xv # turn on debugging
}

## get system info ##
function getSystemInfo
{
	# set +xv # turn off debugging
	osInfo=$(cat /etc/*release)
	shellName=$(ps -p $$ -o args | tail -n 1)
	terminalParentId=$(ps -p $$ -o ppid | tail -n 1 | sed -e 's/^[[:space:]]*//')
	terminalNameRaw=$(ps -p "$terminalParentId" -o args | tail -n 1)
	
	if [[ $terminalNameRaw == *"gnome-terminal"* ]]; then
		terminalName="GNOME"
	elif [[ $terminalNameRaw == *"tmux"* ]]; then
		terminalName="TMUX"
	elif [[ $terminalNameRaw == *"sshd"* ]]; then
		terminalName="SSH"
	elif [[ $terminalNameRaw == *"init"* ]]; then
		terminalName="SYSTEMD"
	else
		terminalName="UNKNOWN or $terminalNameRaw"
	fi
	
	if [[ $osInfo == *"ubuntu"* ]]; then
		osName="UBUNTU"
	elif [[ $osInfo == *"centos"* ]]; then
		osName="CENTOS"
	elif [[ $osInfo == *"aws"* ]]; then
		osName="AWS-linux"
	elif [[ $osInfo == *"debian"* ]]; then
		osName="Debian"
	else
		osName="UNKNOWN"
	fi
	# set -xv # turn on debugging
}

## show dir ##
# compare dir representation to amount of lines on screen #
# pick dir output that fits the screen #
function showDir {
	# set -xv # turn on debugging
	# set +xv # turn off debugging

	## Instantiate variables ##
	local treeVar="$(tree1 --noreport)"
	local -i treeLines="$(echo $treeVar | grep -o '├' | wc -l)"
	local -i ttyRows=$LINES-5
	local dirVar="$(pwd)"
	local -i startSectionsLines=0
	# echo "mergeOutput $mergeOutput"

	# If start screen is printing add the rows to the tree rows
	if [ -n "$mergeOutput" ]; then
		local -i section1Lines="$(echo "$loadSection1var" | wc -l)"
		local -i section2Lines="$(echo "$loadSection2var" | wc -l)"
		local -i startSectionsLines=$section1Lines+$section2Lines-2
		treeLines=$treeLines+$startSectionsLines
	fi

	## Check if tree will fit or if there are no files. If not then use ls ##
	if [[ "$treeLines" > "$ttyRows" ]] || [[ "$treeLines" < "1" ]] || [[ "$treeLines" == "$startSectionsLines" ]] ; then
		echo -n "$dirVar == " && ls
	else
		echo "$dirVar $treeVar"
	fi
	# set -xv # turn on debugging
	# set +xv # turn off debugging
}

## print start screen on TTY load ##
function loadSection1
{
	# prompt_command && prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
	echo "$(echo $mergeOutput | tr \\n ' ')"  # pull on load
	# echo -n "______Status:_____ " && echo "$(echo $mergeOutput | tr \\n ' ')"  # pull on load

	git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ add . > /dev/null && git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ commit -m "backup" --allow-empty-message --short > /dev/null # adds and commits any changes
	export gitStatus="$(git --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ status --short)" # get status on load

	# echo "Comparing local personalization file to remote in git."
	# echo -n "_____Changes:_____ " && echo "$gitStatus"
	if [[ -n "$gitStatus" ]]; then
		echo "$(tput setaf 1)Local changes made. Push using gitttypush$(tput sgr 0)"
	fi
	prompt_command && prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
}

function loadSection2 {
	# echo "_____Private IP(s):_____ $(tput setaf 2)$(hostname -I)$(tput sgr 0)"
	
	tail --pid=$intFqdnPid -f /dev/null
	fqdn="$(cat ~/.fqdn.txt | xargs)" && rm ~/.fqdn.txt
	if [[ -n "$fqdn" ]] ; then
		echo "FQDN(s): ($(tput setaf 2)$fqdn$(tput sgr 0))"
	fi
	# set -xv # turn on debugging
	hostnameVar1="$(hostname -I | awk '{print $1;}')"
	tail --pid=$intPublicIpPid -f /dev/null
	publicIp="$(cat ~/.publicIp.txt)" && rm ~/.publicIp.txt
	echo -n "Terminal: ($(tput setaf 2)$terminalName$(tput sgr 0)) || OS: ($(tput setaf 2)$osName$(tput sgr 0)) || Public IP: ($(tput setaf 2)$publicIp$(tput sgr 0)) || Private IP(s): ($(tput setaf 2)$hostnameVar1$(tput sgr 0))" | \fmt -w $(($COLUMNS+54))
	# set +xv # turn off debugging
	prompt_command && echo -e "${fill} ${hostnameVar}${pwdVar}${nameVar}$(date +'%T')"
}

##### ^^ ##### New Functions ##### ^^ #####

##### vv ##### Functions Built on functions/aliases ##### vv #####

## cd then ls after ##
function cdl
{
	\cd "$@"/; ls;
}

## cd then tree1 after ##
function cdt
{
	\cd "$@"/; tree1;
}

## move file then cd into it ##
function mvf
{
	mv $@ && cd $2;
}

## cat with indentation ##
function cati
{
	\cat "$@" | fmt;
}

## follow with indented lines ##
function followindent
{
	follow $1 | fmt;
}

## follow numbered lines ##
function follownl
{
	follow $1 | \nl -ba -nrz -s " - ";
}

## follow with json formatting ##
function followjq
{
	follow $1 | jq;
}

## less with added indentation ##
function lessf
{
	fmt $1 | less
}

## makes file then makes it executable ##
function touchs
{
	touch "$1" && chmod a+x "$1"; showDir;
}

## makes file then makes it executable and vims it ##
function touchsf
{
	touch "$1" && chmod a+x "$1" && vim "$1"; showDir;
}

## makes file then makes it executable ##
function touchx
{
	touch "$1" && chmod a+x "$1"; showDir;
}

## makes file and vims into it ##
function touchf
{
	touch $1 && vim $1; showDir;
}

## makes directory then cds into it ##
function mkdirf
{
	mkdir $1 && cd $1;
}

## Shortcut for git commit ##
function gitc
{
	git commit -m "$*"
}

##### ^^ ##### Functions Built on functions/aliases ##### ^^ #####


#### vv #### Experimental #### vv ####

## make less more friendly for non-text input files, see lesspipe(1)
# [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

#### ^^ #### Experimental #### ^^ ####

######### ^^ ######### Functions ######### ^^ #########


######### vv ######### Customization for the command prompt ######### vv #########

### Code to input separator and other information into prompt ###
# (this is recalculated every time the prompt is shown in function prompt_command): #

## Initialize styling variables ##
reset_style='\[\033[00m\]' # code to reset text style
prompt_style=$reset_style
command_style=$reset_style'\[\033[1;29m\]' # bold black

# grabs current style
if [ -z "$VIM" ]; then
	status_style=$reset_style'\[\033[0;90m\]' # gray color; use 0;37m for lighter color
else
	status_style=$reset_style'\[\033[0;90;107m\]'
fi

# Generate tty prompt: Once generated calculate the fillsize and remove items if necessary to fit #
function prompt_command {
	### Setup variables ###

	## Figure out who is running the command ##
	name=$(fc -l -1 | awk -v u="$USER" '{if ($2=="sudo") { if ($3=="-u") u=$4; else u="root"; }; printf "%s",u}')
	if [[ $name == "" ]] ; then
		nameVar=""
	else
		nameVar="UN: $name | "
	fi
	
	pwdVar="DIR: $(pwd) | " # Figure out the working dir
	hostnameVar="HN: $(hostname) | " # Figure out the hostname
	fill="--- " # something to start off with incase something goes wrong

	# Calculate fillsize #
	function findFillSize {
		# Fill size is the width of the screen minus the number of characters
		# for time, hostname, current dir, and name
		let fillsize=${COLUMNS}-11-${#hostnameVar}-${#pwdVar}-${#nameVar}
		fill=""
		while [ "$fillsize" -gt "0" ]
		do
			fill="-${fill}" # fill with underscores to work on
			let fillsize=${fillsize}-1
		done
	}
	
	### Calculate fillsize for screen and adjust accordingly ###
	
	## Generate largest prompt and calculate fillsize for largest version ##
	findFillSize
	NEW_NEW_PS1="${fill} ${hostnameVar}${pwdVar}${nameVar}XX:XX:XX"
	
	# If prompt is too large remove vars until it fits #
	if [[ ${#NEW_NEW_PS1} -gt ${COLUMNS} ]] ; then
		# If current dir is bigger than half the screen then remove it first
		# otherwise remove hostname first
		if [[ ${#pwdVar} -gt ${COLUMNS}/2 ]] ; then
			pwdVar=""
			findFillSize
			NEW_NEW_PS1="${fill} ${hostnameVar}${pwdVar}${nameVar}XX:XX:XX"
			
			# if prompt is too large remove $hostnameVar and recalculate fillsize
			if [[ ${#NEW_NEW_PS1} -gt ${COLUMNS} ]] ; then
				hostnameVar=""
				findFillSize
				NEW_NEW_PS1="${fill} ${hostnameVar}${pwdVar}${nameVar}XX:XX:XX"
			fi

		else
			hostnameVar=""
			findFillSize
			NEW_NEW_PS1="${fill} ${hostnameVar}${pwdVar}${nameVar}XX:XX:XX"

			# if prompt is too large remove $pwdVar and recalculate fillsize
			if [[ ${#NEW_NEW_PS1} -gt ${COLUMNS} ]] ; then
				pwdVar=""
				findFillSize
				NEW_NEW_PS1="${fill} ${hostnameVar}${pwdVar}${nameVar}XX:XX:XX"
			fi
		fi
	fi
	
	# If this is an xterm set the title to user@host:dir #
	case "$TERM" in
		xterm*|rxvt*)
			bname=`basename "${PWD/$HOME/~}"`
			echo -ne "\033]0;${bname}: ${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"
			;;
		*)
			;;
	esac
}

## Sets up new prompt command if needed ##
OLD_PROMPT_COMMAND=PROMPT_COMMAND # grabs current prompt
NEW_PROMPT_COMMAND=prompt_command # grabs prompt from code

# Changes prompt command only if different
if [[ ! $OLD_PROMPT_COMMAND == $NEW_PROMPT_COMMAND ]] ; then
	PROMPT_COMMAND=prompt_command
fi

## Sets up new prompt
OLD_PS1="$PS1"
NEW_PS1='${fill} ${hostnameVar}${pwdVar}${nameVar}\t\n'

# Not sure exactly
if [[ ! $PS1 == *'${nameVar}'* ]] ; then
	PS1="$status_style""$NEW_PS1""$prompt_style$OLD_PS1$command_style"
fi

## Reset color for command output ##
# (this one is invoked every time before a command is executed): #
trap 'echo -ne "\e[0m"' DEBUG

######### ^^ ######### Customization for the command prompt ######### ^^ #########

########## vv ########## Setup system ########## vv ##########

## My personal settings ##
force_color_prompt=yes	# add color to terminals
HISTCONTROL=ignoreboth	# don't put duplicate lines or lines starting with space in the history.
shopt -s checkwinsize	# check the window size after each command

## Pull personalization files, get system info, and setup system ##
getSystemInfo
if [ "$mergeOutput" != "Already up to date." ]; then
	~/linux-config/install.sh # runs the install script
fi

## Setup screen command ##
mkdir ~/.screen >/dev/null && chmod 700 ~/.screen
export SCREENDIR=$HOME/.screen

######### vv ######### Check to see if there is a new version of personalization file ######### vv #########

# set -xv # turn on debugging

tail --pid=$intMergeOutput1Pid -f /dev/null
mergeOutput2=$(git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ merge -n) # save mergeOutput into variable
mergeOutput1=$(cat ~/.mergeOutput1.txt) && rm ~/.mergeOutput1.txt
mergeOutput="$mergeOutput1$mergeOutput2"
# mergeOutput=$(git  --git-dir=$HOME/linux-config/.git  --work-tree=$HOME/linux-config/ fetch -q 2>/dev/null && git --git-dir=$HOME/linux-config/.git --work-tree=$HOME/linux-config/ merge -n) # save mergeOutput into variable

## pull newest personalization file on TTY load ##
if [ "$mergeOutput" != "Already up to date." ]; then
	# echo $mergeOutput
	echo "New version detected..."
	# set +xv # turn off debugging
	reloadbash
	# set -xv # turn on debugging
	return 0 2>/dev/null || exit 0
fi

######### ^^ ######### Check to see if there is a new version of personalization file ######### ^^ #########

## Load initial start screen ##
export loadSection1var=$(loadSection1)
echo "$loadSection1var"
export loadSection2var=$(loadSection2)
echo "$loadSection2var"
showDir

# set +xv # turn off debugging

#### vv #### SSH AGENT AUTO START #### vv ####
# LINK: http://mah.everybody.org/docs/ssh https://stackoverflow.com/a/18915067/382458

SSH_ENV="$HOME/.ssh/agent-environment"
mkdir $HOME/.ssh/ > /dev/null

## Start Agent ##
function start_agent {
	echo "Initialising new SSH agent..."
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
	echo succeeded
	chmod 600 "${SSH_ENV}"
	. "${SSH_ENV}" > /dev/null
	/usr/bin/ssh-add;
}

## Source SSH settings, if applicable ##
if [ -f "${SSH_ENV}" ]; then
	. "${SSH_ENV}" > /dev/null
	if [[ -f ~/.ssh/config ]]; then
		#ps ${SSH_AGENT_PID} doesn't work under cywgin
		ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
			start_agent;
		}
	else
		eval "$(ssh-agent -k 2>/dev/null)"
	fi
else
	if [[ -f ~/.ssh/config ]]; then
		start_agent;
	else
		eval "$(ssh-agent -k 2>/dev/null)"
	fi
fi

#### ^^ #### SSH AGENT AUTO START #### ^^ ####

#### vv #### CLI completion/auto-complete? #### vv ####

## builtin autocompletion ##
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

## IP completion for connections ##
function _complete_hosts
{
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	host_list=`{
		for c in /etc/ssh_config /etc/ssh/ssh_config ~/.ssh/config
		do [ -r $c ] && sed -n -e 's/^Host[[:space:]]//p' -e 's/^[[:space:]]*HostName[[:space:]]//p' $c
		done
		for k in /etc/ssh_known_hosts /etc/ssh/ssh_known_hosts ~/.ssh/known_hosts
		do [ -r $k ] && egrep -v '^[#\[]' $k|cut -f 1 -d ' '|sed -e 's/[,:].*//g'
		done
		sed -n -e 's/^[0-9][0-9\.]*//p' /etc/hosts; }|tr ' ' '\n'|grep -v '*'`
	COMPREPLY=( $(compgen -W "${host_list}" -- $cur))
	return 0
}
complete -F _complete_hosts ssh
complete -F _complete_hosts sshs
complete -F _complete_hosts host
complete -F _complete_hosts telnet
complete -F _complete_hosts ping

## DSCONFIG CLI completion ##
function _complete_ds
{
	dspath=$(find / -name "dsconfig" -mount 2>/dev/null | tail -n 1)
		# dspath=$(locate /bin/dsconfig | tail -n 1)
	if [ ! -z "$dspath" ] ; then
		commandlist=$($dspath --help-all | grep '^[a-z].*')
		printf "$commandlist"
		return 0
	fi
}
dspath=$(find / -name "dsconfig" -mount 2>/dev/null | tail -n 1)
	# dspath=$(locate /bin/dsconfig | tail -n 1)
if [ ! -z "$dspath" ] ; then
	complete -W "$(_complete_ds)" dsconfig
fi

#### ^^ #### CLI completion/auto-complete?  #### ^^ ####

## Unset variables that need to be unset ##
declare -a varList=(publicIp mergeOutput sudoCount count)
for var in "${varList[@]}"
do
	unset $var
done

########### ^^ ########## Setup system ########## ^^ ##########
